---
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2022 Canonical Ltd

name: iotdevice-marvell-espressobin-gadget
version: 20-1
summary: EspressoBin gadget
description: |
  Support files for booting EspressoBin v5.
type: gadget
base: core20
assumes: [kernel-assets]
architectures:
  - build-on:
      - amd64
      - arm64
    run-on: arm64

package-repositories:
  - type: apt
    ppa: snappy-dev/image

confinement: strict
grade: stable

parts:
  u-boot:
    plugin: make
    source: https://github.com/u-boot/u-boot.git
    source-type: git
    source-branch: v2022.01
    source-depth: 1
    build-environment:
      - PATH: "/usr/lib/ccache:${PATH}"
    override-pull: |
      snapcraftctl pull
      git am ${SNAPCRAFT_PROJECT_DIR}/u-boot/0001-arm-mvebu-Updated-environment-for-Ubuntu-Core.patch
      git am ${SNAPCRAFT_PROJECT_DIR}/u-boot/0002-arm-mvebu-Enable-support-for-FIT-images.patch
    override-build: |
      make ARCH=arm mvebu_espressobin-88f3720_defconfig
      make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- -j $(nproc)
      cp ${SNAPCRAFT_PART_BUILD}/u-boot.bin ${SNAPCRAFT_PART_INSTALL}/
      tools/mkenvimage -r -s 4096 -o ${SNAPCRAFT_PART_INSTALL}/boot.sel - < /dev/null
      touch ${SNAPCRAFT_PART_INSTALL}/uboot.conf
    build-packages:
      - libpython2.7-dev
      - bc
    prime:
        - boot.sel
        - uboot.conf
  boot-scr:
    plugin: nil
    source: u-boot
    override-build: |
      mkimage -T script -C none -n 'Boot Script' -d boot.scr.in ${SNAPCRAFT_PART_INSTALL}/boot.scr
    build-packages:
      - sed
      - u-boot-tools
  mvddr:
    plugin: nil
    source: https://github.com/MarvellEmbeddedProcessors/mv-ddr-marvell.git
    source-type: git
    source-branch: master
    source-depth: 1
    build-environment:
      - PATH: "/usr/lib/ccache:${PATH}"
    override-build: |
      echo This package will be built by atf
      cp -r ${SNAPCRAFT_PART_SRC}/* ${SNAPCRAFT_PART_BUILD}/
  a3700-utils:
    plugin: nil
    source: https://github.com/MarvellEmbeddedProcessors/A3700-utils-marvell.git
    source-type: git
    source-branch: master
    source-depth: 1
    build-environment:
      - PATH: "/usr/lib/ccache:${PATH}"
    build-packages:
      - libcrypto++-dev
    override-build: |
      # Host tools which do not need to be cross-compiled
      make -C wtptp/src/TBB_Linux -f TBB_linux.mak \
        INCDIR=/usr/include/crypto++/ \
        -j $(nproc)
      make -C wtptp/src/Wtpdownloader_Linux -f makefile.mk \
        -j $(nproc)

      # Need to copy the compiled binaries to where the ATF build process expects it to be
      mkdir -p ${SNAPCRAFT_PART_BUILD}/wtptp/linux
      cp ${SNAPCRAFT_PART_BUILD}/wtptp/src/TBB_Linux/release/TBB_linux \
        ${SNAPCRAFT_PART_BUILD}/wtptp/linux/tbb_linux
      cp ${SNAPCRAFT_PART_BUILD}/wtptp/src/Wtpdownloader_Linux/WtpDownload_linux \
        ${SNAPCRAFT_PART_BUILD}/wtptp/linux/WtpDownload_linux

      # The rest of this package will be built by atf; copy sources
      cp -r ${SNAPCRAFT_PART_SRC}/* ${SNAPCRAFT_PART_BUILD}/
  atf:
    after:
      - a3700-utils
      - mvddr
      - u-boot
      - optee-os
    plugin: nil
    source: https://github.com/MarvellEmbeddedProcessors/atf-marvell.git
    source-type: git
    source-branch: atf-v1.5-armada-18.12
    source-depth: 1
    override-pull: |
      snapcraftctl pull
      patch -p1 < ${SNAPCRAFT_PROJECT_DIR}/atf/0001-Only-set-LOG_LEVEL-if-it-hasn-t-already-been-set.patch
    build-environment:
      - PATH: "/usr/lib/ccache:${PATH}"
    build-packages:
      - libmbedtls-dev
      - libconfig-dev
    # See http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Bootloader#Build_examples for more info
    override-build: |
      # This build only supports the 1GB DDR3 variant
      make DEBUG=1 USE_COHERENT_MEM=0 MARVELL_SECURE_BOOT=0 \
        CLOCKSPRESET=CPU_1000_DDR_800 DDR_TOPOLOGY=2 \
        BOOTDEV=SPINOR PARTNUM=0 CROSS_COMPILE=aarch64-linux-gnu- \
        WTP=${SNAPCRAFT_PART_SRC}/../../a3700-utils/build \
        MV_DDR_PATH=${SNAPCRAFT_PART_SRC}/../../mvddr/build \
        PLAT=a3700 \
        NEED_BL32=yes \
        BL32=${SNAPCRAFT_PART_SRC}/../../optee-os/install/tee.bin \
        BL33=${SNAPCRAFT_PART_SRC}/../../u-boot/install/u-boot.bin \
        all fip
      cp ${SNAPCRAFT_PART_BUILD}/build/a3700/debug/{flash-image.bin,uart-images.tgz} ${SNAPCRAFT_PART_INSTALL}/
  # If the prepare-device step is not required (i.e. not using serial-vault)
  # then comment this section out
  prepare-device:
    plugin: nil
    override-build: |
      echo "Building the 'prepare-device' hook ..."

      if [ -z "${MODEL_APIKEY}" ]; then
        echo "Please define MODEL_APIKEY for building this gadget."
        exit 1
      fi
      if [ -z "${MODEL_APIURL}" ]; then
        echo "Please define MODEL_APIURL for building this gadget."
        exit 1
      fi

      mkdir -p snap/hooks/

      cat << EOF > snap/hooks/prepare-device
      #!/bin/sh -ux
      mkdir -p \$SNAP_COMMON
      exec >> \$SNAP_COMMON/prepare-device-hook.log 2>&1
      product_serial=\$(date -Is)
      echo "product_serial:[\$product_serial]"
      snapctl set registration.proposed-serial="\"\${product_serial}\""
      snapctl set device-service.url="${MODEL_APIURL}"
      snapctl set device-service.headers='{"api-key": "${MODEL_APIKEY}"}'
      EOF

      chmod +x snap/hooks/prepare-device
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/snap/hooks
      cp snap/hooks/prepare-device ${SNAPCRAFT_PART_INSTALL}/snap/hooks

  # optee signing keys: used for signing of Trusted Applications
  optee-keys:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/dev-keys
    source-type: git
    source-branch: ta-keys
    organize:
      '*': ta-keys/
    prime:
        - -*

  optee-os:
    after:
      - optee-fde
      - optee-keys
    plugin: nil
    source: https://github.com/OP-TEE/optee_os.git
    source-type: git
    source-tag: 3.10.0
    source-depth: 1
    build-environment:
      - PATH: "/usr/lib/ccache:${PATH}"
    override-pull: |
      snapcraftctl pull
      patch -p1 < ${SNAPCRAFT_PROJECT_DIR}/optee-os/0001-Add-link.mk-for-Marvell-platforms.patch
    override-build: |
      export ARCH="arm"
      export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
      export CROSS_COMPILE_core="${SNAPCRAFT_ARCH_TRIPLET}-"
      export CROSS_COMPILE_ta_arm64="${SNAPCRAFT_ARCH_TRIPLET}-"
      export CFG_USER_TA_TARGETS="ta_arm64"
      export CFG_ARM64_core=y
      export DEBUG=y \
      export CFG_TEE_CORE_LOG_LEVEL=4 \
      export CFG_TEE_TA_LOG_LEVEL=4 \
      export CFG_TEE_BENCHMARK=n
      export CFG_CORE_HEAP_SIZE=262144
      # set Marvell Armada 3720 platform
      export PLATFORM=marvell
      export PLATFORM_FLAVOR=armada3700
      # add optee-fde TA
      cp -r ${SNAPCRAFT_STAGE}/optee-fde/ta/fde_key_handler ${SNAPCRAFT_PART_BUILD}/ta/
      # determine keys to be used
      export TA_PUBLIC_KEY="${SNAPCRAFT_STAGE}/ta-keys/ta_public.pem"
      export TA_SIGN_KEY="${SNAPCRAFT_STAGE}/ta-keys/ta_private.pem"
      make O=${SNAPCRAFT_PART_BUILD}/out -j$(nproc)
      make O=${SNAPCRAFT_PART_BUILD}/out -j$(nproc) \
            CFG_EARLY_TA=y \
            EARLY_TA_PATHS="out/ta/pkcs11/fd02c9da-306c-48c7-a49c-bbd827ae86ee.stripped.elf \
                            out/ta/trusted_keys/f04a0fe7-1f5d-4b9b-abf7-619b85b4ce8c.stripped.elf \
                            out/ta/fde_key_handler/fd1b2a86-3668-11eb-adc1-0242ac120002.stripped.elf"
      # ${SNAPCRAFT_ARCH_TRIPLET}-objcopy \
      #       -O binary \
      #       ${SNAPCRAFT_PART_BUILD}/out/core/tee.elf \
      #       ${SNAPCRAFT_PART_INSTALL}/tee.bin
      cp ${SNAPCRAFT_PART_BUILD}/out/core/tee-raw.bin ${SNAPCRAFT_PART_INSTALL}/tee.bin
    prime:
      - -*

  optee-client:
    plugin: make
    source: git+ssh://git.launchpad.net/~ondrak/+git/optee-client
    source-type: git
    source-branch: release
    source-depth: 1
    build-environment:
      - PATH: "/usr/lib/ccache:${PATH}"
    make-parameters:
      - ARCH="arm64"
      - DEBUG=0
      - CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
      - CFG_TEE_CLIENT_LOAD_PATH=""
      - CFG_TA_TEST_PATH=0
      - CFG_TEE_SUPP_LOG_LEVEL=0
      - SBINDIR=/sbin
      - LIBDIR=/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}
    stage:
      - sbin
      - usr/lib/*/lib*so*

  optee-fde:
    plugin: dump
    source: git+ssh://git.launchpad.net/~ondrak/+git/optee-uc-fde
    source-type: git
    organize:
      '*': optee-fde/
    prime:
      - -*

  pub-signing-key:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/dev-keys
    source-type: git
    source-branch: master
    stage:
      - u-boot-pubkey.dtsi
    prime:
      - -*

build-packages:
  - build-essential
  - ccache
  - on amd64:
    - gcc-aarch64-linux-gnu
  - else:
    - gcc
